name: 'Tofu Plan'

on:
  pull_request:
    paths:
      - 'iac/**/*.tf'

jobs:
  tofu-plan-and-comment:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1

      - name: Tofu Init
        id: init
        run: tofu -chdir=iac init

      - name: Tofu Format
        id: fmt
        run: tofu -chdir=iac fmt -check
        continue-on-error: true

      - name: Tofu Validate
        id: validate
        run: tofu -chdir=iac validate
        continue-on-error: true

      - name: Tofu Plan
        id: plan
        run: tofu -chdir=iac plan -no-color
        continue-on-error: true

      # https://github.com/marketplace/actions/opentofu-setup-tofu
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
          FMT_OUTPUT: ${{ steps.fmt.outputs.stdout }}
          VALIDATE_OUTPUT: ${{ steps.validate.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
            );

            // Escape backticks in outputs to prevent breaking markdown
            const escapeOutput = (text) => {
              return text ? String(text).replace(/`/g, '\\`') : 'No output';
            };

            const fmtOutput = escapeOutput(process.env.FMT_OUTPUT);
            const validateOutput = escapeOutput(process.env.VALIDATE_OUTPUT);
            const planOutput = escapeOutput(process.env.PLAN);

            const fmtOutcome = '${{ steps.fmt.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
            const initOutcome = '${{ steps.init.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
            const validateOutcome = '${{ steps.validate.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
            const planOutcome = '${{ steps.plan.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';

            const output = `
            #### OpenTofu Format and Style üñåÔ∏è ${fmtOutcome}
            #### OpenTofu Initialization ‚öôÔ∏è ${initOutcome}
            #### OpenTofu Validation ü§ñ ${validateOutcome}
            <details><summary>Validation Output</summary>

            \`\`\`
            ${validateOutput}
            \`\`\`

            </details>

            #### OpenTofu Plan üìñ ${planOutcome}
            <details><summary>Show Plan</summary>

            \`\`\`
            ${planOutput}
            \`\`\`

            </details>

            _Pusher: @${{ github.actor }}, Action: ${{
              github.event_name
            }}, Working Directory: iac, Workflow: ${{
              github.workflow
            }}_
            `;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output,
              });
            }
